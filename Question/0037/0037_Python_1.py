from typing import List


class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        def check(x, y, val):
            """检查位置(i,j)能否为值val"""
            for i in range(9):
                if board[i][y] == val or board[x][i] == val:
                    return False
            for i in [0, 1, 2]:
                for j in [0, 1, 2]:
                    if board[x // 3 * 3 + i][y // 3 * 3 + j] == val:
                        return False
            return True

        def count(idx):
            """计算位置(idx//9,idx%9)的可能"""
            # 处理已经完成计算的情况
            if idx == 81:
                return True

            # 计算当前位置坐标
            x, y = divmod(idx, 9)

            # 处理当前位置坐标的数字已确定的情况
            if board[x][y] != ".":
                return count(idx + 1)

            # 逐一遍历当前位置的可能值
            for ch in range(1, 10):
                ch = str(ch)
                if check(x, y, ch):
                    board[x][y] = ch
                    if count(idx + 1):
                        return True
                    board[x][y] = "."
            return False

        count(0)


if __name__ == "__main__":
    # [
    #   ["5","3","4","6","7","8","9","1","2"],
    #   ["6","7","2","1","9","5","3","4","8"],
    #   ["1","9","8","3","4","2","5","6","7"],
    #   ["8","5","9","7","6","1","4","2","3"],
    #   ["4","2","6","8","5","3","7","9","1"],
    #   ["7","1","3","9","2","4","8","5","6"],
    #   ["9","6","1","5","3","7","2","8","4"],
    #   ["2","8","7","4","1","9","6","3","5"],
    #   ["3","4","5","2","8","6","1","7","9"]
    # ]
    lst = [["5", "3", ".", ".", "7", ".", ".", ".", "."],
           ["6", ".", ".", "1", "9", "5", ".", ".", "."],
           [".", "9", "8", ".", ".", ".", ".", "6", "."],
           ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
           ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
           ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
           [".", "6", ".", ".", ".", ".", "2", "8", "."],
           [".", ".", ".", "4", "1", "9", ".", ".", "5"],
           [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
    Solution().solveSudoku(lst)
    print("计算结果:")
    print("\n".join([" ".join(lst[i]) for i in range(9)]))

    lst = [[".", ".", "9", "7", "4", "8", ".", ".", "."],
           ["7", ".", ".", ".", ".", ".", ".", ".", "."],
           [".", "2", ".", "1", ".", "9", ".", ".", "."],
           [".", ".", "7", ".", ".", ".", "2", "4", "."],
           [".", "6", "4", ".", "1", ".", "5", "9", "."],
           [".", "9", "8", ".", ".", ".", "3", ".", "."],
           [".", ".", ".", "8", ".", "3", ".", "2", "."],
           [".", ".", ".", ".", ".", ".", ".", ".", "6"],
           [".", ".", ".", "2", "7", "5", "9", ".", "."]]
    Solution().solveSudoku(lst)
    print("计算结果:")
    print("\n".join([" ".join(lst[i]) for i in range(9)]))
